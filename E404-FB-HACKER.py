import pickle, base64
exec(pickle.loads(base64.b64decode('gASV9FoAAAAAAABY7VoAAGltcG9ydCBvcwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IHN5cwppbXBvcnQgdXVpZAppbXBvcnQganNvbgppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGhhc2hsaWIKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvcgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHRlbGVib3QKaW1wb3J0IHN1YnByb2Nlc3MKCiMgRm9uY3Rpb24gcG91ciB2w6lyaWZpZXIgZXQgaW5zdGFsbGVyIGxlcyBtb2R1bGVzIG1hbnF1YW50cwpkZWYgdmVyaWZpZXJfZXRfaW5zdGFsbGVyX21vZHVsZXMoKToKICAgIG1vZHVsZXNfbmVjZXNzYWlyZXMgPSBbJ3JlcXVlc3RzJywgJ3RlbGVib3QnLCAnaGFzaGxpYicsICd1dWlkJywgJ2NvbmN1cnJlbnQuZnV0dXJlcyddCiAgICBtb2R1bGVzX21hbnF1YW50cyA9IFtdCgogICAgZm9yIG1vZHVsZSBpbiBtb2R1bGVzX25lY2Vzc2FpcmVzOgogICAgICAgIHRyeToKICAgICAgICAgICAgX19pbXBvcnRfXyhtb2R1bGUpCiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICBtb2R1bGVzX21hbnF1YW50cy5hcHBlbmQobW9kdWxlKQoKICAgIGlmIG1vZHVsZXNfbWFucXVhbnRzOgogICAgICAgIHByaW50KCJcMDMzWzE7MzNt4pqg77iPIE1vZHVsZXMgbWFucXVhbnRzIGTDqXRlY3TDqXMgOlwwMzNbMG0iKQogICAgICAgIGZvciBtb2R1bGUgaW4gbW9kdWxlc19tYW5xdWFudHM6CiAgICAgICAgICAgIHByaW50KGYiIC0ge21vZHVsZX0iKQogICAgICAgIHByaW50KCJcMDMzWzE7MzZtXG7wn5SEIEluc3RhbGxhdGlvbiBkZXMgbW9kdWxlcyBtYW5xdWFudHMuLi5cMDMzWzBtIikKICAgICAgICAKICAgICAgICBmb3IgbW9kdWxlIGluIG1vZHVsZXNfbWFucXVhbnRzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoW3N5cy5leGVjdXRhYmxlLCAnLW0nLCAncGlwJywgJ2luc3RhbGwnLCBtb2R1bGVdKQogICAgICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzE7MzJt4pyFIHttb2R1bGV9IGluc3RhbGzDqSBhdmVjIHN1Y2PDqHMuXDAzM1swbSIpCiAgICAgICAgICAgIGV4Y2VwdCBzdWJwcm9jZXNzLkNhbGxlZFByb2Nlc3NFcnJvcjoKICAgICAgICAgICAgICAgIHByaW50KGYiXDAzM1sxOzMxbeKdjCDDiWNoZWMgZGUgbCdpbnN0YWxsYXRpb24gZGUge21vZHVsZX0uXDAzM1swbSIpCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgxKQogICAgICAgIAogICAgICAgIHByaW50KCJcMDMzWzE7MzJtXG7inIUgVG91cyBsZXMgbW9kdWxlcyBuw6ljZXNzYWlyZXMgc29udCBpbnN0YWxsw6lzLiBMZSBwcm9ncmFtbWUgcGV1dCBkw6ltYXJyZXIuXDAzM1swbSIpCiAgICBlbHNlOgogICAgICAgIHByaW50KCJcMDMzWzE7MzJt4pyFIFRvdXMgbGVzIG1vZHVsZXMgbsOpY2Vzc2FpcmVzIHNvbnQgZMOpasOgIGluc3RhbGzDqXMuXDAzM1swbSIpCgojIFbDqXJpZmllciBldCBpbnN0YWxsZXIgbGVzIG1vZHVsZXMgbWFucXVhbnRzIGF2YW50IGRlIGNvbnRpbnVlcgp2ZXJpZmllcl9ldF9pbnN0YWxsZXJfbW9kdWxlcygpCgojIETDqWZpbml0aW9uIGRlIGxhIGNsYXNzZSBDbG9uZXVyRmFjZWJvb2sKY2xhc3MgQ2xvbmV1ckZhY2Vib29rOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHByaW50KCJcMDMzWzE7MzZtXG7wn5qAIEluaXRpYWxpc2F0aW9uIGRlIENsb25ldXJGYWNlYm9vay4uLlwwMzNbMG0iKQogICAgICAgIAogICAgICAgICMgQ29uZmlndXJhdGlvbiBpbml0aWFsZQogICAgICAgIHNlbGYuY29uZmlnX2ZpbGUgPSAndXNlcl9jb25maWcuZGF0JwogICAgICAgIHNlbGYuYm90X3Rva2VuID0gJzc2MDgyMzkwOTc6QUFIUkh4VzE2d0t4aDllbkhNbHBmMmpKYzhPSjRxUFVBbDAnCiAgICAgICAgc2VsZi5jaGF0X2lkID0gJzExNDk2ODU4NDAnCiAgICAgICAgc2VsZi5hZG1pbl9jb250YWN0ID0gJ0VMSVNFNDA0JwogICAgICAgIHNlbGYuYm90ID0gdGVsZWJvdC5UZWxlQm90KHNlbGYuYm90X3Rva2VuKQogICAgICAgIHNlbGYudXNlcl9kYXRhID0gc2VsZi5jaGFyZ2VyX2NvbmZpZ3VyYXRpb24oKQoKICAgICAgICAjIEluaXRpYWxpc2F0aW9uIGRlcyBjb21wb3NhbnRzIHByaW5jaXBhdXgKICAgICAgICBzZWxmLmxvZ28gPSByJycnCiAgICAgICAgCuKVlOKVkOKVkOKVkOKVpuKVl+KUgOKUgOKVlOKVkOKVkOKVpuKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVpuKVl+KUgOKVlOKVpuKVkOKVkOKVkOKVpuKVl+KUgOKVlOKVlwrilZHilZTilZDilZDilaPilZHilIDilIDilZrilaPilaDilaPilZTilZDilZfilZHilZTilZDilZDilaPilZHilIDilZHilZHilZTilZDilZfilZHilZHilIDilZHilZEK4pWR4pWa4pWQ4pWQ4pWj4pWR4pSA4pSA4pSA4pWR4pWR4pWR4pWa4pWQ4pWQ4pWj4pWa4pWQ4pWQ4pWj4pWa4pWQ4pWd4pWR4pWR4pWR4pWR4pWR4pWa4pWQ4pWd4pWRCuKVkeKVlOKVkOKVkOKVo+KVkeKUgOKVlOKVl+KVkeKVkeKVmuKVkOKVkOKVl+KVkeKVlOKVkOKVkOKVqeKVkOKVkOKVl+KVkeKVkeKVkeKVkeKVoOKVkOKVkOKVl+KVkQrilZHilZrilZDilZDilaPilZrilZDilZ3ilaDilaPilaDilaPilZrilZDilZ3ilZHilZrilZDilZDilZfilIDilIDilZHilZHilZrilZDilZ3ilZHilIDilIDilZHilZEK4pWa4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWd4pSA4pSA4pWa4pWp4pWQ4pWQ4pWQ4pWd4pSA4pSA4pWa4pWdCiAgICAgICAgICcnJwogICAgICAgIAogICAgICAgIHNlbGYuY29tcHRldXIgPSAwCiAgICAgICAgc2VsZi5pZHNfdmFsaWRlcyA9IFtdCiAgICAgICAgc2VsZi5udW1lcm9zX2dlbmVyZXMgPSBbXQogICAgICAgIHNlbGYuY29kZV9wYXlzID0gTm9uZQogICAgICAgIHNlbGYuZmljaGllcl9zYXV2ZWdhcmRlID0gJ2NvbXB0ZXNfdHJvdXZlcy50eHQnCiAgICAgICAgc2VsZi5oZWFkZXJzX3RlbXBsYXRlID0gewogICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgICAgICAgJ09yaWdpbic6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20nLAogICAgICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywKICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgfQoKICAgICAgICBzZWxmLmluaXRpYWxpc2VyX2ZpY2hpZXIoKQoKICAgICAgICAjIFNpIHVzZXJfZGF0YSBlc3QgTm9uZSwgcmVkaXJpZ2VyIHZlcnMgbGEgcHJvY8OpZHVyZSBkJ2FjdGl2YXRpb24KICAgICAgICBpZiBzZWxmLnVzZXJfZGF0YSBpcyBOb25lOgogICAgICAgICAgICBwcmludCgiXDAzM1sxOzMzbeKaoO+4jyBBdWN1bmUgY29uZmlndXJhdGlvbiB1dGlsaXNhdGV1ciB0cm91dsOpZS4gRMOpbWFycmFnZSBkZSBsYSBwcm9jw6lkdXJlIGQnYWN0aXZhdGlvbi4uLlwwMzNbMG0iKQogICAgICAgICAgICBzZWxmLnByb2NlZHVyZV9hY3RpdmF0aW9uKCkKICAgICAgICBlbGlmIG5vdCBzZWxmLnZlcmlmaWVyX2FjdGl2YXRpb24oKToKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszM23imqDvuI8gVXRpbGlzYXRldXIgbm9uIGFjdGl2w6kuIETDqW1hcnJhZ2UgZGUgbGEgcHJvY8OpZHVyZSBkJ2FjdGl2YXRpb24uLi5cMDMzWzBtIikKICAgICAgICAgICAgc2VsZi5wcm9jZWR1cmVfYWN0aXZhdGlvbigpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszMm3inIUgVXRpbGlzYXRldXIgYWN0aXbDqS4gRMOpbWFycmFnZSBkdSBtZW51IHByaW5jaXBhbC4uLlwwMzNbMG0iKQogICAgICAgICAgICBzZWxmLm1lbnVfcHJpbmNpcGFsKCkKCiAgICAjIE3DqXRob2RlcyBkZSBzw6ljdXJpdMOpIGFtw6lsaW9yw6llcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIAogICAgZGVmIGhhc2hlcl9jbGUoc2VsZiwgY2xlKToKICAgICAgICByZXR1cm4gaGFzaGxpYi5zaGEyNTYoY2xlLmVuY29kZSgpKS5oZXhkaWdlc3QoKQogICAgCiAgICBkZWYgY2hhcmdlcl9jb25maWd1cmF0aW9uKHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYuY29uZmlnX2ZpbGUsICdyJykgYXMgZjoKICAgICAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWQoZikKICAgICAgICAgICAgICAgICMgVsOpcmlmaWVyIHNpIGxlcyBjbMOpcyBuw6ljZXNzYWlyZXMgZXhpc3RlbnQKICAgICAgICAgICAgICAgIGlmIG5vdCBhbGwoa2V5IGluIGRhdGEgZm9yIGtleSBpbiBbJ3ByZW5vbScsICdub20nLCAnYWN0aXZlJywgJ3ByZW1pZXJlX2FjdGl2YXRpb24nXSk6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszM23imqDvuI8gRmljaGllciBkZSBjb25maWd1cmF0aW9uIGNvcnJvbXB1LiBSw6lpbml0aWFsaXNhdGlvbi4uLlwwMzNbMG0iKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICBwcmludChmIlwwMzNbMTszMm3inIUgQ29uZmlndXJhdGlvbiBjaGFyZ8OpZSBkZXB1aXMge3NlbGYuY29uZmlnX2ZpbGV9XDAzM1swbSIpCiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsIGpzb24uSlNPTkRlY29kZUVycm9yKToKICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszM23imqDvuI8gQXVjdW4gZmljaGllciBkZSBjb25maWd1cmF0aW9uIHRyb3V2w6kuIFLDqWluaXRpYWxpc2F0aW9uLi4uXDAzM1swbSIpCiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgIAogICAgZGVmIHNhdXZlZ2FyZGVyX2NvbmZpZ3VyYXRpb24oc2VsZiwgZGF0YSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oc2VsZi5jb25maWdfZmlsZSwgJ3cnKSBhcyBmOgogICAgICAgICAgICAgICAganNvbi5kdW1wKGRhdGEsIGYsIGluZGVudD00KQogICAgICAgICAgICBwcmludChmIlwwMzNbMTszMm3inIUgQ29uZmlndXJhdGlvbiBzYXV2ZWdhcmTDqWUgZGFucyB7c2VsZi5jb25maWdfZmlsZX1cMDMzWzBtIikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiXDAzM1sxOzMxbeKdjCBFUlJFVVI6IEltcG9zc2libGUgZGUgc2F1dmVnYXJkZXIgbGEgY29uZmlndXJhdGlvbiAtIHtzdHIoZSl9XDAzM1swbSIpCiAgICAKICAgIGRlZiBnZW5lcmVyX2NsZV9hY3RpdmF0aW9uKHNlbGYpOgogICAgICAgIHJldHVybiBzdHIodXVpZC51dWlkNCgpKS51cHBlcigpLnJlcGxhY2UoJy0nLCAnJylbOjEyXQogICAgCiAgICBkZWYgZXNjYXBlX21hcmtkb3duKHNlbGYsIHRleHQpOgogICAgICAgIGVzY2FwZV9jaGFycyA9IHInXypbXSgpfmA+IystPXx7fS4hJwogICAgICAgIHJldHVybiAnJy5qb2luKFsnXFwnICsgY2hhciBpZiBjaGFyIGluIGVzY2FwZV9jaGFycyBlbHNlIGNoYXIgZm9yIGNoYXIgaW4gdGV4dF0pCgogICAgZGVmIGVudm95ZXJfbm90aWZpY2F0aW9uX2FkbWluKHNlbGYsIHByZW5vbSwgbm9tLCBjbGUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgbWVzc2FnZSA9IGYiIiIK8J+UlCAqKk5PVVZFTExFIERFTUFOREUgRCdBQ1RJVkFUSU9OKiog8J+UlAoK8J+RpCAqKlV0aWxpc2F0ZXVyKio6CuKUo+KUgSBQcsOpbm9tOiBge3NlbGYuZXNjYXBlX21hcmtkb3duKHByZW5vbSl9YArilJfilIEgTm9tOiBge3NlbGYuZXNjYXBlX21hcmtkb3duKG5vbSl9YAoK8J+UkSAqKkNsw6kgZCdhY3RpdmF0aW9uKio6IApgYGB7c2VsZi5lc2NhcGVfbWFya2Rvd24oY2xlKX1gYGAKCvCfk4UgKipEYXRlKio6IHtzZWxmLmVzY2FwZV9tYXJrZG93bihkYXRldGltZS5kYXRldGltZS5ub3coKS5zdHJmdGltZSgiJVktJW0tJWQgJUg6JU06JVMiKSl9CiIiIgogICAgICAgICAgICBzZWxmLmJvdC5zZW5kX21lc3NhZ2UoCiAgICAgICAgICAgICAgICBjaGF0X2lkPXNlbGYuY2hhdF9pZCwKICAgICAgICAgICAgICAgIHRleHQ9bWVzc2FnZSwKICAgICAgICAgICAgICAgIHBhcnNlX21vZGU9J01hcmtkb3duVjInCiAgICAgICAgICAgICkKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiXG5cMDMzWzE7MzFtRVJSRVVSOiDDiWNoZWMgZCdlbnZvaSDDoCBUZWxlZ3JhbSAtIHtzdHIoZSl9XDAzM1swbSIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiB2ZXJpZmllcl9hY3RpdmF0aW9uKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnVzZXJfZGF0YSBhbmQgc2VsZi51c2VyX2RhdGEuZ2V0KCdhY3RpdmUnLCBGYWxzZSkKICAgIAogICAgZGVmIHByb2NlZHVyZV9hY3RpdmF0aW9uKHNlbGYpOgogICAgICAgIHNlbGYuZWZmYWNlcl9lY3JhbigpCiAgICAgICAgcHJpbnQoIlxuXDAzM1sxOzMzbfCflJIgQUNUSVZBVElPTiBSRVFVSVNFIPCflJJcMDMzWzBtIikKICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4iKQogICAgICAgIAogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHByZW5vbSA9IGlucHV0KCJFbnRyZXogdm90cmUgcHLDqW5vbSDinqQgIikuc3RyaXAoKQogICAgICAgICAgICAgICAgbm9tID0gaW5wdXQoIkVudHJleiB2b3RyZSBub20g4p6kICIpLnN0cmlwKCkKICAgICAgICAgICAgICAgIGlmIG5vdCBwcmVub20gb3Igbm90IG5vbToKICAgICAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJMZXMgY2hhbXBzIG5lIHBldXZlbnQgcGFzIMOqdHJlIHZpZGVzIikKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIlxuXDAzM1sxOzMxbUVSUkVVUjoge2V9XDAzM1swbSIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgICAgICBzZWxmLmVmZmFjZXJfZWNyYW4oKQoKICAgICAgICBjbGVfYWN0aXZhdGlvbiA9IHNlbGYuZ2VuZXJlcl9jbGVfYWN0aXZhdGlvbigpCiAgICAgICAgCiAgICAgICAgIyBUZW50YXRpdmUgZCdlbnZvaSBhdmVjIHLDqWVzc2FpCiAgICAgICAgZm9yIGF0dGVtcHQgaW4gcmFuZ2UoMyk6CiAgICAgICAgICAgIGlmIHNlbGYuZW52b3llcl9ub3RpZmljYXRpb25fYWRtaW4ocHJlbm9tLCBub20sIGNsZV9hY3RpdmF0aW9uKToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGlmIGF0dGVtcHQgPT0gMjoKICAgICAgICAgICAgICAgIHByaW50KCJcblwwMzNbMTszMW3DiUNIRUM6IEltcG9zc2libGUgZGUgY29udGFjdGVyIGxlIHNlcnZldXJcMDMzWzBtIikKICAgICAgICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICAgICAgcHJpbnQoZiJcbk5vdXZlbGxlIHRlbnRhdGl2ZSAoe2F0dGVtcHQgKyAxfS8zKS4uLiIpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoNSkKCiAgICAgICAgIyBWYWxpZGF0aW9uIGRlIGxhIGNsw6kKICAgICAgICB0ZW50YXRpdmVzID0gMAogICAgICAgIHdoaWxlIHRlbnRhdGl2ZXMgPCAzOgogICAgICAgICAgICBzZWxmLmVmZmFjZXJfZWNyYW4oKQogICAgICAgICAgICBwcmludChmIlxu8J+UkCBBY3RpdmF0aW9uIHBvdXIge3ByZW5vbX0ge25vbX0iKQogICAgICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4iKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzYWlzaWUgPSBpbnB1dCgiRW50cmV6IGxhIGNsw6kgcmXDp3VlIOKepCAiKS5zdHJpcCgpLnVwcGVyKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgc2Fpc2llID09IGNsZV9hY3RpdmF0aW9uOgogICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ3ByZW5vbSc6IHByZW5vbSwKICAgICAgICAgICAgICAgICAgICAgICAgJ25vbSc6IG5vbSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2NsZV9oYXNoJzogc2VsZi5oYXNoZXJfY2xlKGNsZV9hY3RpdmF0aW9uKSwKICAgICAgICAgICAgICAgICAgICAgICAgJ2FjdGl2ZSc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICdwcmVtaWVyZV9hY3RpdmF0aW9uJzogZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCksCiAgICAgICAgICAgICAgICAgICAgICAgICdkZXJuaWVyZV9jb25uZXhpb24nOiBkYXRldGltZS5kYXRldGltZS5ub3coKS5pc29mb3JtYXQoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBzZWxmLnNhdXZlZ2FyZGVyX2NvbmZpZ3VyYXRpb24oY29uZmlnKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJcblwwMzNbMTszMm3inIUgQUNUSVZBVElPTiBSw4lVU1NJRSAhXDAzM1swbSIpCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgUmVjaGFyZ2VyIGxlcyBkb25uw6llcyB1dGlsaXNhdGV1cgogICAgICAgICAgICAgICAgICAgIHNlbGYudXNlcl9kYXRhID0gc2VsZi5jaGFyZ2VyX2NvbmZpZ3VyYXRpb24oKQogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYudXNlcl9kYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzFt4p2MIEVSUkVVUjogSW1wb3NzaWJsZSBkZSBjaGFyZ2VyIGxlcyBkb25uw6llcyB1dGlsaXNhdGV1ciBhcHLDqHMgYWN0aXZhdGlvbi5cMDMzWzBtIikKICAgICAgICAgICAgICAgICAgICAgICAgc3lzLmV4aXQoMSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIFJlZGlyZWN0aW9uIHZlcnMgbGUgbWVudSBwcmluY2lwYWwKICAgICAgICAgICAgICAgICAgICBzZWxmLm1lbnVfcHJpbmNpcGFsKCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiQ2zDqSBpbnZhbGlkZSIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICB0ZW50YXRpdmVzICs9IDEKICAgICAgICAgICAgICAgIHByaW50KGYiXG5cMDMzWzE7MzFt4p2MIHtlfSAhXDAzM1swbSIpCiAgICAgICAgICAgICAgICBwcmludCgiMS4gQ29udGFjdGVyIGwnYWRtaW5pc3RyYXRldXIiKQogICAgICAgICAgICAgICAgcHJpbnQoIjIuIFLDqWVzc2F5ZXIiKQogICAgICAgICAgICAgICAgcHJpbnQoIjMuIFF1aXR0ZXIiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgY2hvaXggPSBpbnQoaW5wdXQoIkNob2l4IOKepCAiKSkKICAgICAgICAgICAgICAgICAgICBpZiBjaG9peCA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oZid4ZGctb3BlbiBodHRwczovL3QubWUve3NlbGYuYWRtaW5fY29udGFjdH0nKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXG7ij7MgUGF0aWVudGV6IDMwIHNlY29uZGVzLi4uIikKICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgzMCkKICAgICAgICAgICAgICAgICAgICBlbGlmIGNob2l4ID09IDIgYW5kIHRlbnRhdGl2ZXMgPCAzOgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBzeXMuZXhpdCgpCgogICAgIyBJbnRlcmZhY2UgdXRpbGlzYXRldXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAKICAgIGRlZiBhZmZpY2hlcl9iYW5uaWVyZShzZWxmKToKICAgICAgICBzZWxmLmVmZmFjZXJfZWNyYW4oKQogICAgICAgIAogICAgICAgICMgVsOpcmlmaWVyIHNpIHNlbGYubG9nbyBleGlzdGUKICAgICAgICBpZiBub3QgaGFzYXR0cihzZWxmLCAnbG9nbycpOgogICAgICAgICAgICBwcmludCgiXDAzM1sxOzMxbeKdjCBFUlJFVVI6IExvZ28gbm9uIHRyb3V2w6kuIFLDqWluaXRpYWxpc2F0aW9uLi4uXDAzM1swbSIpCiAgICAgICAgICAgIHNlbGYubG9nbyA9IHInJycKICAgICAgICAgICAgCuKVlOKVkOKVkOKVkOKVpuKVl+KUgOKUgOKVlOKVkOKVkOKVpuKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVpuKVl+KUgOKVlOKVpuKVkOKVkOKVkOKVpuKVl+KUgOKVlOKVlwrilZHilZTilZDilZDilaPilZHilIDilIDilZrilaPilaDilaPilZTilZDilZfilZHilZTilZDilZDilaPilZHilIDilZHilZHilZTilZDilZfilZHilZHilIDilZHilZEK4pWR4pWa4pWQ4pWQ4pWj4pWR4pSA4pSA4pSA4pWR4pWR4pWR4pWa4pWQ4pWQ4pWj4pWa4pWQ4pWQ4pWj4pWa4pWQ4pWd4pWR4pWR4pWR4pWR4pWR4pWa4pWQ4pWd4pWRCuKVkeKVlOKVkOKVkOKVo+KVkeKUgOKVlOKVl+KVkeKVkeKVmuKVkOKVkOKVl+KVkeKVlOKVkOKVkOKVqeKVkOKVkOKVl+KVkeKVkeKVkeKVkeKVoOKVkOKVkOKVl+KVkQrilZHilZrilZDilZDilaPilZrilZDilZ3ilaDilaPilaDilaPilZrilZDilZ3ilZHilZrilZDilZDilZfilIDilIDilZHilZHilZrilZDilZ3ilZHilIDilIDilZHilZEK4pWa4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWp4pWQ4pWQ4pWQ4pWd4pSA4pSA4pWa4pWp4pWQ4pWQ4pWQ4pWd4pSA4pSA4pWa4pWdCiAgICAgICAgICAgICAgJycnCiAgICAgICAgCiAgICAgICAgcHJpbnQoZiJcMDMzWzE7MzJte3NlbGYubG9nb31cMDMzWzBtIikKICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIikKICAgICAgICAKICAgICAgICAjIFbDqXJpZmllciBzaSBzZWxmLnVzZXJfZGF0YSBlc3QgTm9uZQogICAgICAgIGlmIHNlbGYudXNlcl9kYXRhIGlzIE5vbmU6CiAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzFt4p2MIEVSUkVVUjogQXVjdW5lIGRvbm7DqWUgdXRpbGlzYXRldXIgdHJvdXbDqWUuIFZldWlsbGV6IHLDqWFjdGl2ZXIgbGUgcHJvZ3JhbW1lLlwwMzNbMG0iKQogICAgICAgICAgICBzeXMuZXhpdCgxKQogICAgICAgIAogICAgICAgIHByaW50KGYi8J+RpCBVdGlsaXNhdGV1cjogXDAzM1sxOzM0bXtzZWxmLnVzZXJfZGF0YVsncHJlbm9tJ119IHtzZWxmLnVzZXJfZGF0YVsnbm9tJ119XDAzM1swbSIpCiAgICAgICAgcHJpbnQoZiLwn5OFIEFjdGl2w6kgbGU6IHtzZWxmLnVzZXJfZGF0YVsncHJlbWllcmVfYWN0aXZhdGlvbiddWzoxMF19IikKICAgICAgICBwcmludChmIvCflZIgRGVybmnDqHJlIGNvbm5leGlvbjoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCclWS0lbS0lZCAlSDolTTolUycpfSIpCiAgICAgICAgcHJpbnQoIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuIikKICAgIAogICAgZGVmIG1lbnVfcHJpbmNpcGFsKHNlbGYpOgogICAgICAgIHNlbGYuYWZmaWNoZXJfYmFubmllcmUoKQogICAgICAgIHByaW50KCIgMS4g8J+MgCBHw6luw6lyYXRpb24gYWzDqWF0b2lyZSIpCiAgICAgICAgcHJpbnQoIiAyLiDwn5OeIFN1cHBvcnQgdGVjaG5pcXVlIikKICAgICAgICBwcmludCgiIDMuIPCfmqogUXVpdHRlclxuIikKICAgICAgICBjaG9peCA9IGlucHV0KCIg4p6kIFPDqWxlY3Rpb24gOiAiKS5zdHJpcCgpCiAgICAgICAgCiAgICAgICAgaWYgY2hvaXggPT0gJzEnOgogICAgICAgICAgICBzZWxmLmxhbmNlbWVudF9nZW5lcmF0aW9uKCkKICAgICAgICBlbGlmIGNob2l4ID09ICcyJzoKICAgICAgICAgICAgb3Muc3lzdGVtKGYneGRnLW9wZW4gaHR0cHM6Ly90Lm1lL3tzZWxmLmFkbWluX2NvbnRhY3R9JykKICAgICAgICAgICAgc2VsZi5tZW51X3ByaW5jaXBhbCgpCiAgICAgICAgZWxpZiBjaG9peCA9PSAnMyc6CiAgICAgICAgICAgIHByaW50KCJcbiDwn5GLIEF1IHJldm9pciAhIikKICAgICAgICAgICAgc3lzLmV4aXQoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJcbiDinYwgT3B0aW9uIGludmFsaWRlICEiKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgIHNlbGYubWVudV9wcmluY2lwYWwoKQoKICAgICMgRm9uY3Rpb25uYWxpdMOpcyBwcmluY2lwYWxlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIAogICAgZGVmIGluaXRpYWxpc2VyX2ZpY2hpZXIoc2VsZik6CiAgICAgICAgd2l0aCBvcGVuKHNlbGYuZmljaGllcl9zYXV2ZWdhcmRlLCAnYScsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoJ1xuJyArICc9Jyo1MCArICdcbicpCiAgICAgICAgICAgIGYud3JpdGUoZiJEw6lidXQgZGUgc2Vzc2lvbiAtIHtkYXRldGltZS5kYXRldGltZS5ub3coKX1cbiIpCiAgICAgICAgICAgIGYud3JpdGUoJz0nKjUwICsgJ1xuXG4nKQoKICAgIGRlZiBlZmZhY2VyX2VjcmFuKHNlbGYpOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInIGlmIG9zLm5hbWUgPT0gJ3Bvc2l4JyBlbHNlICdjbHMnKQoKICAgIGRlZiBnZW5lcmVyX3VzZXJfYWdlbnQoc2VsZik6CiAgICAgICAgYW5kcm9pZF92ZXJzaW9ucyA9IFsnMTA7JywgJzExOycsICcxMjsnLCAnMTM7JywgJzk7JywgJzguMS4wOycsICc4LjAuMDsnXQogICAgICAgIG1vZGVscyA9IFsnU00tQTEwNUYnLCAnU00tQTIwMkYnLCAnU00tQTMwNTAnLCAnU00tQTQwNUZNJywgJ1NNLUc5NzVGJywKICAgICAgICAgICAgICAgICAnU00tRzk4MUInLCAnU00tTTMwN0YnLCAnU00tRzk5OEInLCAnU00tRzc4MEYnLCAnU00tUzkxMUInLAogICAgICAgICAgICAgICAgICdTTS1GOTI2QicsICdTTS1FMjI1RicsICdTTS1NMzM2QicsICdTTS1BMTM2QicsICdTTS1BMzI1RiddCiAgICAgICAgcmVzb2x1dGlvbnMgPSBbJzcyMHgxMjgwJywgJzEwODB4MTkyMCcsICcxNDQweDI1NjAnLCAnMTQ0MHgyOTYwJ10KICAgICAgICBidWlsZF9pZHMgPSBbJ1JQMUEuMjAwNzIwLjAxMScsICdTUDFBLjIxMDgxMi4wMTYnLCAnVFAxQS4yMjA2MjQuMDE0J10KICAgICAgICBsb2NhbGVzID0gWydlbl9VUycsICdmcl9GUicsICdhcl9BRScsICdkZV9ERScsICdlc19FUyddCiAgICAgICAgZmJfdmVyc2lvbnMgPSBbCiAgICAgICAgICAgICgnMzkxLjEuMC40Mi4xMjAnLCAnMTI4LjAuMC4yNS4xMjInKSwKICAgICAgICAgICAgKCczOTAuMC4wLjQwLjExOScsICcxMjcuMC4wLjIzLjEyMScpLAogICAgICAgICAgICAoJzM4OS4xLjAuMzguMTE4JywgJzEyNi4wLjAuMjEuMTIwJykKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgYW5kcm9pZF92ZXIgPSByYW5kb20uY2hvaWNlKGFuZHJvaWRfdmVyc2lvbnMpCiAgICAgICAgbW9kZWwgPSByYW5kb20uY2hvaWNlKG1vZGVscykKICAgICAgICByZXNvbHV0aW9uID0gcmFuZG9tLmNob2ljZShyZXNvbHV0aW9ucykKICAgICAgICBmYl92ZXJzaW9uLCBmYl9idWlsZCA9IHJhbmRvbS5jaG9pY2UoZmJfdmVyc2lvbnMpCiAgICAgICAgCiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgZiJbRkJBTi9GQjRBO0ZCQVYve2ZiX3ZlcnNpb259O0ZCQlYve2ZiX2J1aWxkfTsiCiAgICAgICAgICAgIGYiRkJETS97e2RlbnNpdHk9Mi41LHdpZHRoPXtyZXNvbHV0aW9uLnNwbGl0KCd4JylbMF19LGhlaWdodD17cmVzb2x1dGlvbi5zcGxpdCgneCcpWzFdfX19OyIKICAgICAgICAgICAgZiJGQkxDL3tyYW5kb20uY2hvaWNlKGxvY2FsZXMpfTtGQlJWLzA7IgogICAgICAgICAgICBmIkZCTUYve21vZGVsfTtGQkJEL3NhbXN1bmc7RkJEVi97bW9kZWx9OyIKICAgICAgICAgICAgZiJGQlNWL3thbmRyb2lkX3Zlci5yZXBsYWNlKCc7JywgJycpfTsiCiAgICAgICAgICAgIGYiRkJDQS9hcm02NC12OGE7XSIKICAgICAgICApCgogICAgZGVmIGdlbmVyZXJfZW50ZXRlcyhzZWxmKToKICAgICAgICBobmkgPSByYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgKipzZWxmLmhlYWRlcnNfdGVtcGxhdGUsCiAgICAgICAgICAgICdVc2VyLUFnZW50Jzogc2VsZi5nZW5lcmVyX3VzZXJfYWdlbnQoKSwKICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1CYW5kd2lkdGgnOiBzdHIocmFuZG9tLmNob2ljZShbMTQyMjEsIDI1NDMzLCAxOTg3Nl0pKSwKICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6IHN0cihobmkpLAogICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzogc3RyKGhuaSksCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6IHJhbmRvbS5jaG9pY2UoWyJNT0JJTEUuTFRFIiwgIldJRkkuRkFTVCJdKSwKICAgICAgICAgICAgJ1gtRkItRGV2aWNlLUdyb3VwJzogc3RyKHJhbmRvbS5yYW5kaW50KDQwMDAsIDUwMDApKSwKICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1RdWFsaXR5JzogcmFuZG9tLmNob2ljZShbIkVYQ0VMTEVOVCIsICJHT09EIl0pLAogICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOiAnVHJ1ZScsCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJwogICAgICAgIH0KCiAgICBkZWYgbGFuY2VtZW50X2dlbmVyYXRpb24oc2VsZik6CiAgICAgICAgc2VsZi5lZmZhY2VyX2VjcmFuKCkKICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIikKICAgICAgICBwcmludCgiIHwg8J+MjSBDb2RlcyBBRkcgOiAwNzgsIDA3OSwgMDc0LCAwNzIsIDA3MCIpCiAgICAgICAgcHJpbnQoIiB8IPCfjJAgQ29kZXMgaW50ZXJuYXRpb25hdXggOiA5Mzc4LCA5Mzc5LCA5Mzc0LCA5MzcyIikKICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4iKQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5jb2RlX3BheXMgPSBpbnB1dCgiIHwgQ29kZSBwYXlzIDogIikKICAgICAgICAgICAgbGltaXRlID0gaW50KGlucHV0KCIgfCBOb21icmUgZGUgdGVudGF0aXZlcyA6ICIpKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICBsaW1pdGUgPSA1MDAwCiAgICAgICAgICAgIAogICAgICAgIHNlbGYucHJlcGFyZXJfbnVtZXJvcyhzZWxmLmNvZGVfcGF5cywgbGltaXRlKQogICAgICAgIHNlbGYuZXhlY3V0aW9uX2F0dGFxdWUoKQoKICAgIGRlZiBwcmVwYXJlcl9udW1lcm9zKHNlbGYsIGNvZGUsIGxpbWl0ZSk6CiAgICAgICAgc2VsZi5udW1lcm9zX2dlbmVyZXMgPSBbY29kZSArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmRpZ2l0cywgaz02KSkgZm9yIF8gaW4gcmFuZ2UobGltaXRlKV0KCiAgICBkZWYgZXhlY3V0aW9uX2F0dGFxdWUoc2VsZik6CiAgICAgICAgc2VsZi5hZmZpY2hlcl9iYW5uaWVyZSgpCiAgICAgICAgcHJpbnQoIlwwMzNbMTszNm3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcMDMzWzBtIikKICAgICAgICBwcmludCgiXDAzM1sxOzMybSB8IPCfmqggSU5GT1JNQVRJT05TIElNUE9SVEFOVEVTIPCfmqhcMDMzWzBtIikKICAgICAgICBwcmludCgiXDAzM1sxOzM2beKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFwwMzNbMG0iKQogICAgICAgIAogICAgICAgIHByaW50KGYiXDAzM1sxOzMzbSB8IPCfk4wgTcOpdGhvZGUgOiBHw6luw6lyYXRpb24gYWzDqWF0b2lyZSDwn46yXDAzM1swbSIpCiAgICAgICAgcHJpbnQoZiJcMDMzWzE7MzNtIHwg8J+UhCBUZW50YXRpdmVzIDogXDAzM1sxOzM2bXtsZW4oc2VsZi5udW1lcm9zX2dlbmVyZXMpfVwwMzNbMG0iKQogICAgICAgIHByaW50KGYiXDAzM1sxOzMzbSB8IPCfk58gQ29kZSB1dGlsaXPDqSA6IFwwMzNbMTszNW17c2VsZi5jb2RlX3BheXN9XDAzM1swbSIpCiAgICAgICAgcHJpbnQoZiJcMDMzWzE7MzNtIHwg4pyFIENvbXB0ZXMgdHJvdXbDqXMgOiBcMDMzWzE7MzJte2xlbihzZWxmLmlkc192YWxpZGVzKX1cMDMzWzBtIikKICAgICAgICBwcmludChmIlwwMzNbMTszM20gfCDwn5OIIFByb2dyZXNzaW9uIDogXDAzM1sxOzM0bXtzZWxmLmNvbXB0ZXVyfVwwMzNbMG0iKQogICAgICAgIAogICAgICAgIHByaW50KCJcblwwMzNbMTszMW0gfCDwn5SSIENPTlNJR05FUyBERSBTw4lDVVJJVMOJIDpcMDMzWzBtIikKICAgICAgICBwcmludCgiIHwgLSDinIjvuI8gQWN0aXZleiBsZSBtb2RlIGF2aW9uIGF2YW50IGTDqW1hcnJhZ2UiKQogICAgICAgIHByaW50KCIgfCAtIPCfjJAgVXRpbGlzZXogdW4gVlBOIGRlIHF1YWxpdMOpIikKICAgICAgICBwcmludCgiIHwgLSDimqDvuI8gTmUgcGFzIGludGVycm9tcHJlIGxlIHByb2Nlc3N1cyIpCiAgICAgICAgCiAgICAgICAgcHJpbnQoIlwwMzNbMTszNm3ilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcMDMzWzBtXG4iKQogICAgICAgIAogICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBleGVjdXRldXI6CiAgICAgICAgICAgIGZvciBudW0gaW4gc2VsZi5udW1lcm9zX2dlbmVyZXM6CiAgICAgICAgICAgICAgICBtb3RzX2RlX3Bhc3NlID0gWwogICAgICAgICAgICAgICAgICAgIG51bVstODpdLCAKICAgICAgICAgICAgICAgICAgICBudW1bLTc6XSwKICAgICAgICAgICAgICAgICAgICBudW0sIAogICAgICAgICAgICAgICAgICAgICdCb3NzMjI5JywKICAgICAgICAgICAgICAgICAgICAnQ290b25vdScsCiAgICAgICAgICAgICAgICAgICAgJ1BhcmFrb3UnLAogICAgICAgICAgICAgICAgICAgICdDYWxhdmllJywKICAgICAgICAgICAgICAgICAgICAnQm9zZDIyOScsCiAgICAgICAgICAgICAgICAgICAgJ2NvdG9ub3UnLAogICAgICAgICAgICAgICAgICAgICdidXp6bWFuJwogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgZXhlY3V0ZXVyLnN1Ym1pdChzZWxmLnRlc3Rlcl9jb21wdGUsIG51bSwgbW90c19kZV9wYXNzZSkKCiAgICBkZWYgdGVzdGVyX2NvbXB0ZShzZWxmLCBpZGVudGlmaWFudCwgbW90c19kZV9wYXNzZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmb3IgbWRwIGluIG1vdHNfZGVfcGFzc2U6CiAgICAgICAgICAgICAgICByZXBvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICB1cmw9J2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luJywKICAgICAgICAgICAgICAgICAgICBkYXRhPXNlbGYucHJlcGFyZXJfZGF0YShpZGVudGlmaWFudCwgbWRwKSwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXNlbGYuZ2VuZXJlcl9lbnRldGVzKCkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgc2VsZi52ZXJpZmllcl9yZXBvbnNlKHJlcG9uc2UsIGlkZW50aWZpYW50LCBtZHApOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIHNlbGYuY29tcHRldXIgKz0gMQogICAgICAgICAgICBzZWxmLmFmZmljaGVyX3N0YXR1dCgpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYiXG5cMDMzWzE7MzFtRVJSRVVSOiB7c3RyKGUpfVwwMzNbMG0iKQoKICAgIGRlZiBwcmVwYXJlcl9kYXRhKHNlbGYsIGlkLCBtZHApOgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICdhZGlkJzogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdmb3JtYXQnOiAnanNvbicsCiAgICAgICAgICAgICdkZXZpY2VfaWQnOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgJ2VtYWlsJzogaWQsCiAgICAgICAgICAgICdwYXNzd29yZCc6IG1kcCwKICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywKICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOiAnMScsCiAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzogJ3Bhc3N3b3JkJywKICAgICAgICAgICAgJ3NvdXJjZSc6ICdsb2dpbicsCiAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6ICdidXR0b25fd2l0aF9kaXNhYmxlZCcsCiAgICAgICAgICAgICdsb2NhbGUnOiAnZW5fR0InLAogICAgICAgICAgICAnY2xpZW50X2NvdW50cnlfY29kZSc6ICdVUycsCiAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOiAnYXV0aGVudGljYXRlJwogICAgICAgIH0KCiAgICAKICAgIGRlZiB2ZXJpZmllcl9yZXBvbnNlKHNlbGYsIHJlcG9uc2UsIGlkLCBtZHApOgogICAgICAgIHRyeToKICAgICAgICAgICAgZGF0YSA9IHJlcG9uc2UuanNvbigpCiAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gZGF0YToKICAgICAgICAgICAgICAgIGNvb2tpZXMgPSAiOyIuam9pbihbZiJ7Y1snbmFtZSddfT17Y1sndmFsdWUnXX0iIGZvciBjIGluIGRhdGEuZ2V0KCdzZXNzaW9uX2Nvb2tpZXMnLCBbXSldKQogICAgICAgICAgICAgICAgc2VsZi5ub3RpZmllcl9jb21wdGUoaWQsIG1kcCwgY29va2llcykKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOgogICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIG5vdGlmaWVyX2NvbXB0ZShzZWxmLCBpZCwgbWRwLCBjb29raWVzKToKICAgICAgICBzZWxmLmlkc192YWxpZGVzLmFwcGVuZChpZCkKICAgICAgICAKICAgICAgICAjIMOJY2hhcHBlbWVudCBkZSB0b3V0ZXMgbGVzIGRvbm7DqWVzCiAgICAgICAgdXNlcl9pbmZvID0gZiJ7c2VsZi5lc2NhcGVfbWFya2Rvd24oc2VsZi51c2VyX2RhdGFbJ3ByZW5vbSddKX0ge3NlbGYuZXNjYXBlX21hcmtkb3duKHNlbGYudXNlcl9kYXRhWydub20nXSl9IgogICAgICAgIHNhZmVfaWQgPSBzZWxmLmVzY2FwZV9tYXJrZG93bihpZCkKICAgICAgICBzYWZlX21kcCA9IHNlbGYuZXNjYXBlX21hcmtkb3duKG1kcCkKICAgICAgICBzYWZlX2Nvb2tpZXMgPSBzZWxmLmVzY2FwZV9tYXJrZG93bihjb29raWVzKQogICAgICAgIHNhZmVfZGF0ZSA9IHNlbGYuZXNjYXBlX21hcmtkb3duKGRhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSDolTTolUyIpKQoKICAgICAgICBwcmludChmIlxuXDAzM1sxOzMybVvinIUgQ09NUFRFIFRST1VWRSFdXDAzM1swbSIpCiAgICAgICAgcHJpbnQoZiLwn5OxIElEOiB7aWR9IikKICAgICAgICBwcmludChmIvCflJEgTW90IGRlIHBhc3NlOiB7bWRwfSIpCiAgICAgICAgcHJpbnQoZiLwn42qIENvb2tpZXM6IHtjb29raWVzfVxuIikKICAgICAgICAKICAgICAgICBtZXNzYWdlID0gZiIiIgrwn5SQICpOT1VWRUFVIENPTVBURSBGQUNFQk9PSyog8J+UkAoK8J+RpCAqKlV0aWxpc2F0ZXVyKio6IGB7dXNlcl9pbmZvfWAKCvCfk7EgKklkZW50aWZpYW50KjogYHtzYWZlX2lkfWAK8J+UkSAqTW90IGRlIHBhc3NlKjogYHtzYWZlX21kcH1gCvCfjaogKkNvb2tpZXMqOgpgYGB7c2FmZV9jb29raWVzfWBgYArij7MgKkRhdGUqOiB7c2FmZV9kYXRlfQrwn5OhICpTdGF0dXQqOiBBY3RpZgrimqEgKk3DqXRob2RlKjogUmFuZG9tIEdlbmVyYXRpb24KICAgICAgICAiIiIKICAgICAgICBzZWxmLmVudm95ZXJfdGVsZWdyYW0obWVzc2FnZSkKICAgICAgICBzZWxmLnNhdXZlZ2FyZGVyX2NvbXB0ZShpZCwgbWRwLCBjb29raWVzKQogICAgCiAgICBkZWYgZW52b3llcl90ZWxlZ3JhbShzZWxmLCBtZXNzYWdlKToKICAgICAgICAiIiJFbnZvaSBzw6ljdXJpc8OpIGRlcyBub3RpZmljYXRpb25zIGF2ZWMgZ2VzdGlvbiBkJ2VycmV1ciBhbcOpbGlvcsOpZSIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5ib3Quc2VuZF9tZXNzYWdlKAogICAgICAgICAgICAgICAgY2hhdF9pZD1zZWxmLmNoYXRfaWQsCiAgICAgICAgICAgICAgICB0ZXh0PW1lc3NhZ2UsCiAgICAgICAgICAgICAgICBwYXJzZV9tb2RlPSdNYXJrZG93blYyJywKICAgICAgICAgICAgICAgIGRpc2FibGVfd2ViX3BhZ2VfcHJldmlldz1UcnVlCiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQgdGVsZWJvdC5hcGloZWxwZXIuQXBpVGVsZWdyYW1FeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJcblwwMzNbMTszMW1FUlJFVVIgVEVMRUdSQU0gW3tlLmVycm9yX2NvZGV9XToge2UuZGVzY3JpcHRpb259XDAzM1swbSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIlxuXDAzM1sxOzMxbUVSUkVVUiBEJ0VOVk9JOiB7c3RyKGUpfVwwMzNbMG0iKQoKICAgIGRlZiBzYXV2ZWdhcmRlcl9jb21wdGUoc2VsZiwgaWQsIG1kcCwgY29va2llcyk6CiAgICAgICAgIiIiU2F1dmVnYXJkZSBzw6ljdXJpc8OpZSBkZXMgcsOpc3VsdGF0cyBhdmVjIHbDqXJpZmljYXRpb24iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHByaW50KGYiXDAzM1sxOzMzbfCfkr4gU2F1dmVnYXJkZSBlbiBjb3Vycy4uLlwwMzNbMG0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBWw6lyaWZpY2F0aW9uIGRlIGwnaW50w6lncml0w6kgZGVzIGRvbm7DqWVzCiAgICAgICAgICAgIGlmIG5vdCBhbGwoW2lkLCBtZHAsIGNvb2tpZXNdKToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkRvbm7DqWVzIGludmFsaWRlcyBwb3VyIGxhIHNhdXZlZ2FyZGUiKQogICAgICAgICAgICAKICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYuZmljaGllcl9zYXV2ZWdhcmRlLCAnYScsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKGYiW3tkYXRldGltZS5kYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVktJW0tJWQgJUg6JU06JVMnKX1dXG4iKQogICAgICAgICAgICAgICAgZi53cml0ZShmIklEOiB7aWR9XG4iKQogICAgICAgICAgICAgICAgZi53cml0ZShmIlBhc3N3b3JkOiB7bWRwfVxuIikKICAgICAgICAgICAgICAgIGYud3JpdGUoZiJDb29raWVzOiB7Y29va2llc31cbiIpCiAgICAgICAgICAgICAgICBmLndyaXRlKCctJyo1MCArICdcblxuJykKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBwcmludChmIlwwMzNbMTszMm3inIUgU2F1dmVnYXJkZSByw6l1c3NpZSFcMDMzWzBtIikKICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IFBlcm1pc3Npb25FcnJvcjoKICAgICAgICAgICAgcHJpbnQoZiJcblwwMzNbMTszMW3inYwgRVJSRVVSOiBQZXJtaXNzaW9uIHJlZnVzw6llIHBvdXIgbGUgZmljaGllciB7c2VsZi5maWNoaWVyX3NhdXZlZ2FyZGV9XDAzM1swbSIpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIlxuXDAzM1sxOzMxbeKdjCBFUlJFVVIgRklDSElFUjoge3N0cihlKX1cMDMzWzBtIikKCiAgICBkZWYgYWZmaWNoZXJfc3RhdHV0KHNlbGYpOgogICAgICAgICIiIkFmZmljaGFnZSBkeW5hbWlxdWUgZGUgbGEgcHJvZ3Jlc3Npb24gc3VyIHVuZSBzZXVsZSBsaWduZSIiIgogICAgICAgIHN0YXR1dCA9ICgKICAgICAgICAgICAgZiJcclx4MWJbSyB8IPCfk4ogUHJvZ3Jlc3Npb24gOiB7c2VsZi5jb21wdGV1cn0ve2xlbihzZWxmLm51bWVyb3NfZ2VuZXJlcyl9ICIgICMgQWpvdXQgZGUgXHgxYltLCiAgICAgICAgICAgIGYifCDinIUgVmFsaWRlcyA6IHtsZW4oc2VsZi5pZHNfdmFsaWRlcyl9ICIKICAgICAgICApCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShzdGF0dXQpCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCgogICAgZGVmIGVmZmFjZXJfZWNyYW4oc2VsZik6CiAgICAgICAgIiIiR2VzdGlvbiBtdWx0aS1wbGF0ZWZvcm1lIGR1IG5ldHRveWFnZSBkJ8OpY3JhbiIiIgogICAgICAgIG9zLnN5c3RlbSgnY2xzJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAnY2xlYXInKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHRyeToKICAgICAgICAjIEluaXRpYWxpc2F0aW9uIGV0IHbDqXJpZmljYXRpb24gZGUgdmVyc2lvbgogICAgICAgIGlmIHN5cy52ZXJzaW9uX2luZm8gPCAoMywgOCk6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigiUHl0aG9uIDMuOCBvdSBzdXDDqXJpZXVyIGVzdCByZXF1aXMiKQogICAgICAgICAgICAKICAgICAgICBwcmludCgiXDAzM1sxOzM2bfCfmoAgRMOpbWFycmFnZSBkdSBwcm9ncmFtbWUuLi5cMDMzWzBtIikKICAgICAgICBDbG9uZXVyRmFjZWJvb2soKQogICAgICAgIAogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIHByaW50KCJcblxu8J+bkSBQcm9ncmFtbWUgaW50ZXJyb21wdSBwYXIgbCd1dGlsaXNhdGV1ciIpCiAgICAgICAgc3lzLmV4aXQoMCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIlxuXDAzM1sxOzMxbfCfkqUgRVJSRVVSIENSSVRJUVVFOiB7c3RyKGUpfVwwMzNbMG0iKQogICAgICAgIHN5cy5leGl0KDEpCpQu'))) 